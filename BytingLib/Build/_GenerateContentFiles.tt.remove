<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ output extension=".meta" #>

<#
	const string NAME = "[TODO: set project name here, example: MyCoolGame]";
	string csprojName = NAME + ".csproj";

	Stopwatch sw = new Stopwatch();
	sw.Start();
	
    Environment.CurrentDirectory = this.Host.ResolvePath("");

	// get BytingLib location
    string csproj = File.ReadAllText(csprojName);
    int index = csproj.IndexOf(@"/BytingLib/BytingLib.csproj");
    
    const string include = "<ProjectReference Include=\"";
    int start = csproj.LastIndexOf(include, index) + include.Length;
    string path = csproj.Substring(start, index - start);
	string buildTemplatesProjectPath = Path.Combine(path, "BuildTemplates");
	path = Path.Combine(buildTemplatesProjectPath, "bin", "Debug", "net8.0", "BuildTemplates");
	path = Path.GetFullPath(path);
	
	bool windows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
	if (windows)
		path += ".exe";

    bool builtVersionIsEqualSourceVersion = false;
	
	if (File.Exists(path))
	{        
		var currentBuildVersion = FileVersionInfo.GetVersionInfo(path);
        if (currentBuildVersion.ProductVersion != null)
        {
			string productVersion = currentBuildVersion.ProductVersion;
			int plusIndex = productVersion.IndexOf('+');
			if (plusIndex != -1)
			{
				productVersion = productVersion.Remove(plusIndex);
			}
			
            Version builtVersion = Version.Parse(productVersion);
            string buildTemplatesCsproj = File.ReadAllText(Path.Combine(buildTemplatesProjectPath, "BuildTemplates.csproj"));
            string versionStr = "<Version>";
            int indexStart = buildTemplatesCsproj.IndexOf(versionStr) + versionStr.Length;
            int indexEnd = buildTemplatesCsproj.IndexOf("<", indexStart);
            Version sourceVersion = Version.Parse(buildTemplatesCsproj.Substring(indexStart, indexEnd - indexStart));
            if (sourceVersion == builtVersion)
            {
                builtVersionIsEqualSourceVersion = true;
            }
        }
	}
	
	if (!builtVersionIsEqualSourceVersion)
	{
		// build BuildTemplates
		Process buildProcess;
		string command = "dotnet build \"" + buildTemplatesProjectPath + "\"";
		if (windows)
		{
			var p1 = new ProcessStartInfo("CMD.exe");
			p1.CreateNoWindow = true;
			p1.WindowStyle = ProcessWindowStyle.Hidden;
			p1.Arguments = "/C " + command;
			buildProcess = Process.Start(p1);
		}
		else
		{
            buildProcess = new System.Diagnostics.Process ();
            buildProcess.StartInfo.FileName = "/bin/bash";
            buildProcess.StartInfo.Arguments = "-c \" " + command + " \"";
            buildProcess.StartInfo.UseShellExecute = false; 
            buildProcess.StartInfo.RedirectStandardOutput = true;
            buildProcess.Start ();
		}
		buildProcess.WaitForExit();
	}
	
	
	// Run BuildTemplates.exe
    var p = new ProcessStartInfo(path);
    p.CreateNoWindow = true;
    p.WindowStyle = ProcessWindowStyle.Hidden;
	p.Arguments = NAME + " loadOnStartup:false processorToDataType:SomeProcessor,SomeC#DataType dataTypeToVarExtension:SomeC#DataType,MyType extensionToDataType:SomeExtension|SomeCSharpType";
    var process = Process.Start(p);
	process.WaitForExit();
	
	sw.Stop();
	string output = "Seconds it took to generate the content: " + sw.ElapsedMilliseconds / 1000f;
#>

<#= output #>
